// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistryResources.Data;

namespace RegistryResources.Data.Migrations
{
    [DbContext(typeof(DataContextSQL))]
    [Migration("20200808153804_newAlerts")]
    partial class newAlerts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RegistryResources.Business.AddressModel", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BadAddress")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitide")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<bool>("NeedsVerification")
                        .HasColumnType("bit");

                    b.Property<bool>("NoMail")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RegistryResources.Business.AlertModel", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DisplayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("ReplayCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("RegistryResources.Business.AnswerModel", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("RegistryResources.Business.CultureModel", b =>
                {
                    b.Property<int>("CultureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CultureId");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("RegistryResources.Business.EmailModel", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BadEmail")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsVerification")
                        .HasColumnType("bit");

                    b.Property<bool>("NoEmail")
                        .HasColumnType("bit");

                    b.HasKey("EmailId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("RegistryResources.Business.PatientModel", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrantId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("RegistrantId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("RegistryResources.Business.PatientProxyModel", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ProxyId")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId", "ProxyId");

                    b.HasIndex("ProxyId");

                    b.ToTable("PatientProxies");
                });

            modelBuilder.Entity("RegistryResources.Business.PhoneModel", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BadPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedsVerification")
                        .HasColumnType("bit");

                    b.Property<bool>("NoPhone")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("RegistryResources.Business.ProxyModel", b =>
                {
                    b.Property<int>("ProxyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegistrantId")
                        .HasColumnType("int");

                    b.HasKey("ProxyId");

                    b.HasIndex("RegistrantId");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("RegistryResources.Business.QuestionAnswerModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("RegistryResources.Business.QuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConstraintKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("RegistryResources.Business.RegistrantModel", b =>
                {
                    b.Property<int>("RegistrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegistrantId");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmailId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Registrants");
                });

            modelBuilder.Entity("RegistryResources.Business.ResearcherModel", b =>
                {
                    b.Property<int>("ResearcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrantId")
                        .HasColumnType("int");

                    b.HasKey("ResearcherId");

                    b.HasIndex("RegistrantId");

                    b.ToTable("Researchers");
                });

            modelBuilder.Entity("RegistryResources.Business.SurveyModel", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IRBNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResearcherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyStateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyId");

                    b.HasIndex("ResearcherId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("RegistryResources.Business.SurveyQuestionModel", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("SurveyId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("RegistryResources.Business.PatientModel", b =>
                {
                    b.HasOne("RegistryResources.Business.RegistrantModel", "Registrant")
                        .WithMany()
                        .HasForeignKey("RegistrantId");
                });

            modelBuilder.Entity("RegistryResources.Business.PatientProxyModel", b =>
                {
                    b.HasOne("RegistryResources.Business.PatientModel", "Patient")
                        .WithMany("PatientProxy")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistryResources.Business.ProxyModel", "Proxy")
                        .WithMany("PatientProxy")
                        .HasForeignKey("ProxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegistryResources.Business.ProxyModel", b =>
                {
                    b.HasOne("RegistryResources.Business.RegistrantModel", "Registrant")
                        .WithMany()
                        .HasForeignKey("RegistrantId");
                });

            modelBuilder.Entity("RegistryResources.Business.QuestionAnswerModel", b =>
                {
                    b.HasOne("RegistryResources.Business.AnswerModel", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistryResources.Business.QuestionModel", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegistryResources.Business.RegistrantModel", b =>
                {
                    b.HasOne("RegistryResources.Business.AddressModel", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("RegistryResources.Business.EmailModel", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("RegistryResources.Business.PhoneModel", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");
                });

            modelBuilder.Entity("RegistryResources.Business.ResearcherModel", b =>
                {
                    b.HasOne("RegistryResources.Business.RegistrantModel", "Registrant")
                        .WithMany()
                        .HasForeignKey("RegistrantId");
                });

            modelBuilder.Entity("RegistryResources.Business.SurveyModel", b =>
                {
                    b.HasOne("RegistryResources.Business.ResearcherModel", "Researcher")
                        .WithMany()
                        .HasForeignKey("ResearcherId");
                });

            modelBuilder.Entity("RegistryResources.Business.SurveyQuestionModel", b =>
                {
                    b.HasOne("RegistryResources.Business.QuestionModel", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistryResources.Business.SurveyModel", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
